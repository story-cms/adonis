import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext';
import { schema } from '@ioc:Adonis/Core/Validator';
import IndexService from 'App/Services/IndexService';
import { storyConfig } from 'Config/story';
import { DashboardProps, AddStatus } from '@story-cms/ui';

export default class DashboardController {
  public async index(ctx: HttpContextContract) {
    if (!ctx.version || !ctx.story) return ctx.response.notFound();

    const version = ctx.version;
    const story = ctx.story;

    const service = new IndexService(story);

    const addStatus: AddStatus = await service.getAddStatus(ctx.version);
    const index = await service.getItems(version);
    const props: DashboardProps = { index, addStatus };

    return ctx.inertia.render('DashboardIndex', { ...props });
  }

  public async poke({ inertia }: HttpContextContract) {
    const props = { description: 'This is a description' };

    return inertia.render('Poke', props);
  }

  public async switch(ctx: HttpContextContract) {
    const switchRequest = schema.create({
      language: schema.string.nullable(),
      story: schema.string.nullable(),
    });
    const payload = await ctx.request.validate({ schema: switchRequest });

    // set the locale if it has been provided
    if (payload.language) {
      const language =
        storyConfig.languages.find((lang) => lang.language === payload.language) ||
        storyConfig.languages[0];
      ctx.session.put('locale', language.locale);
    }

    // set the story if it has been provided
    if (payload.story) {
      const story =
        storyConfig.stories.find((story) => story.name === payload.story) ||
        storyConfig.stories[0];
      ctx.session.put('storyId', story.id);
    }

    // force a page relaod to refresh the stores
    return ctx.inertia.location('/');
  }
}
