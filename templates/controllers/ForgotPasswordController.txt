import { HttpContextContract } from '@ioc:Adonis/Core/HttpContext';
import { DateTime } from 'luxon';
import User from 'App/Models/User';
import Mail from '@ioc:Adonis/Addons/Mail';
import { string } from '@ioc:Adonis/Core/Helpers';
import Env from '@ioc:Adonis/Core/Env';
import Logger from '@ioc:Adonis/Core/Logger';
import { schema, rules } from '@ioc:Adonis/Core/Validator';

export default class ForgotPasswordController {
  public async index({ inertia }: HttpContextContract) {
    return inertia.render('ForgotPassword');
  }

  public async forgotPassword({ request, response, session }: HttpContextContract) {
    // account request password recovery
    const postSchema = schema.create({
      email: schema.string([rules.email()]),
    });

    const payload = await request.validate({ schema: postSchema });

    // checking if email is registered
    const user = await User.findBy('email', payload.email);

    if (user === null) {
      session.flash('errors', {
        email: 'Email not found.',
      });
      return response.redirect().back();
    }

    // generating token
    const token = string.generateRandom(32);

    // registering when token was created and saving token
    user.resetTokenCreatedAt = DateTime.now();
    user.resetToken = token;

    await user.save();

    try {
      await Mail.send((message) => {
        message
          .from(Env.get('MAIL_FROM_ADDRESS'))
          .to(user.email)
          .subject('Password reset')
          .htmlView('emails/forgetPassword', {
            name: user.name,
            link: `${Env.get('APP_URL')}/reset-password/${user.resetToken}`,
          });
      });
    } catch (err) {
      Logger.error('Sending password reset email failed');
      Logger.error(err);
      session.flash('errors', {
        email: 'We had trouble sending that email, please try again later.',
      });
      return response.redirect().back();
    }
    return response.redirect().back();
  }

  public resetRequest({ inertia }: HttpContextContract) {
    return inertia.render('ResetPassword');
  }

  public async resetPassword({
    request,
    response,
    params,
    session,
  }: HttpContextContract) {
    const token = params.token;
    const postSchema = schema.create({
      email: schema.string([rules.trim(), rules.email()]),
      password: schema.string([rules.minLength(6), rules.confirmed('confirmPassword')]),
    });

    const payload = await request.validate({ schema: postSchema });

    // looking for user with the registered email
    const user = await User.findByOrFail('email', payload.email);

    // checking if token is still the same
    // just to make sure that the user is not using an old link
    // after requesting the password recovery again
    const sameToken = token === user.resetToken;

    if (!sameToken || token === '') {
      session.flash('errors', { token: 'Invalid Token' });
      return response.redirect().back();
    }

    // checking if token is still valid (24 hour period)
    const tokenExpired = DateTime.utc().diff(user.resetTokenCreatedAt!).hours > 24;

    if (tokenExpired) {
      session.flash('errors', { token: 'Token expired, request another one' });
      return response.redirect().back();
    }

    // saving new password
    user.password = payload.password;

    // TODO: find a way to set it to null/undefined
    user.resetToken = '';
    // user.resetTokenCreatedAt = undefined;

    // persisting data (saving)
    await user.save();
    return response.redirect().back();
  }
}
