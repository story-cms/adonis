import { DateTime } from 'luxon';
import Hash from '@ioc:Adonis/Core/Hash';
import { column, beforeSave, BaseModel, computed } from '@ioc:Adonis/Lucid/Orm';

export default class User extends BaseModel {
  public static roles = ['admin', 'editor'] as const;

  @column({ isPrimary: true })
  public id: number;

  @column()
  public email: string;

  @column({ serializeAs: null })
  public password: string;

  @column()
  public name: string;

  @column()
  public language: string | null;

  @column({ serializeAs: null })
  public rememberMeToken?: string;

  @column({ serializeAs: null })
  public resetToken?: string;

  @column({ serializeAs: null })
  public resetTokenCreatedAt?: DateTime;

  @column()
  public role: string;

  @column.dateTime({ autoCreate: true })
  public createdAt: DateTime;

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  public updatedAt: DateTime;

  @beforeSave()
  public static async hashPassword(user: User) {
    if (user.$dirty.password) {
      user.password = await Hash.make(user.password);
    }
  }

  public defaultLanguage(storySourceLanguage: string = 'en'): string {
    if (this.language === '*' || this.language === null) return storySourceLanguage;

    return this.language!;
  }

  @computed()
  public get isManager(): boolean {
    return this.language === '*';
  }

  @computed()
  public get isAdmin(): boolean {
    return this.role === 'admin';
  }

  @computed()
  public get initials(): string {
    const parts = this.name
      .trim()
      .split(' ')
      .map((part) => part.trim().charAt(0));

    if (parts.length === 1) return parts[0];
    if (parts.length === 2) return `${parts[0]}${parts[1]}`;
    return `${parts[0]}${parts[parts.length - 1]}`;
  }
}
