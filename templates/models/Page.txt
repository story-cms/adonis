import { DateTime } from 'luxon';
import { BaseModel, column } from '@ioc:Adonis/Lucid/Orm';
import { PageMeta } from '@story-cms/ui';

export default class Page extends BaseModel {
  @column({ isPrimary: true })
  public id: number;

  @column()
  public apiVersion: number;

  @column()
  public locale: string;

  @column()
  public order: number;

  @column()
  public isPublished: boolean;

  @column()
  public bundle: string;

  @column()
  public updatedBy: number;

  @column.dateTime({ autoCreate: true })
  public createdAt: DateTime;

  @column.dateTime({ autoCreate: true, autoUpdate: true })
  public updatedAt: DateTime;

  public get model() {
    return {
      ...this.parsedBundle,
      id: this.id,
      isPublished: this.isPublished,
      type: this.isLink ? 'link' : 'text',
    };
  }

  public get parsedBundle(): PageBundle {
    const start = typeof this.bundle === 'string' ? JSON.parse(this.bundle) : this.bundle;
    return start;
  }

  public updateBundle(changes: any) {
    const old = this.parsedBundle;
    const fresh = <PageBundle>{
      group: this.freshValue(changes, old, 'group', 1),
      title: this.freshValue(changes, old, 'title', ''),
      icon: this.freshValue(changes, old, 'icon', ''),
      description: this.freshValue(changes, old, 'description', ''),
      body: this.freshValue(changes, old, 'body', ''),
    };

    this.bundle = JSON.stringify(fresh);
  }

  protected freshValue(
    changes: Object,
    old: Object,
    key: string,
    fallback: string | number,
  ): string | number {
    if (changes[key] !== undefined) return changes[key];
    if (old[key] !== undefined) return old[key];
    return fallback;
  }

  // does the body contain a url?
  public get isLink(): boolean {
    const body = this.parsedBundle.body;
    if (body === undefined) return false;
    return body.startsWith('http://') || body.startsWith('https://');
  }

  public bundleWithTracking(tracking: string): PageBundle {
    const bundle = this.parsedBundle;
    if (!this.isLink) return bundle;

    const glue = bundle.body.split('?').length === 1 ? '?' : '&';
    bundle.body = `${bundle.body}${glue}${tracking}`;
    return bundle;
  }

  public get meta(): PageMeta {
    return {
      id: this.id,
      createdAt: this.createdAt.toString(),
      updatedAt: this.updatedAt.toString(),
    };
  }  
}

export interface PageVersion {
  apiVersion: number;
  locale: string;
}

export interface PageBundle {
  group: number;
  title: string;
  icon: string;
  description: string;
  body: string;
}
